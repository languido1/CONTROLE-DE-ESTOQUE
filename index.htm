<!DOCTYPE html>
<html lang="pt-BR">
<head>
  <meta charset="utf-8"/>
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Controle de Estoque | √ìticas Diniz</title>
  <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@400;600;700&display=swap" rel="stylesheet"/>
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet"/>
  <style>
    :root {
      --primary: #2a4365;
      --secondary: #4299e1;
      --light: #ebf8ff;
      --dark: #1a365d;
      --success: #48bb78;
      --warning: #ed8936;
      --danger: #e53e3e;
    }
    * { margin: 0; padding: 0; box-sizing: border-box; }
    body { font-family: 'Montserrat', sans-serif; background-color: #f0f4f8; color: #2d3748; line-height: 1.6; }

    /* LOGIN */
    #login-container { display: flex; justify-content: center; align-items: center; height: 100vh; }
    #loginForm { background: white; padding: 30px; border-radius: 8px; box-shadow: 0 4px 10px rgba(0,0,0,0.1 ); text-align: center; width: 320px; }
    #loginForm h2 { margin-bottom: 20px; color: var(--primary); }
    #loginForm input { width: 100%; padding: 10px; margin: 8px 0; border: 1px solid #ccc; border-radius: 6px; }
    #loginForm button { width: 100%; padding: 10px; background: var(--secondary); color: white; border: none; border-radius: 6px; cursor: pointer; font-weight: 600; margin-top: 10px; }
    #loginForm button:hover { background: var(--primary); }
    .error-msg { color: red; font-size: 14px; margin-top: 10px; min-height: 18px; }

    /* DASHBOARD */
    .container { max-width: 1200px; margin: 0 auto; padding: 20px; display: none; }
    header { display: flex; justify-content: space-between; align-items: center; padding: 20px 0; border-bottom: 1px solid #e2e8f0; margin-bottom: 30px; }
    .logo { display: flex; align-items: center; gap: 15px; }
    .logo h1 { font-size: 24px; font-weight: 700; }
    .logo h1 span { color: var(--secondary); font-weight: 600; }
    .user-menu { position: relative; display: flex; align-items: center; gap: 10px; cursor: pointer; padding: 8px 12px; border-radius: 6px; }
    .user-menu:hover { background: var(--light); }
    .user-dropdown { position: absolute; top: 100%; right: 0; background: white; border: 1px solid #e2e8f0; border-radius: 6px; box-shadow: 0 4px 6px rgba(0,0,0,0.1); min-width: 150px; display: none; z-index: 1000; }
    .user-dropdown.show { display: block; }
    .user-dropdown button { width: 100%; padding: 10px 15px; background: none; border: none; text-align: left; cursor: pointer; color: var(--dark); }
    .user-dropdown button:hover { background: var(--light); }
    .user-dropdown button.logout { color: var(--danger); border-top: 1px solid #e2e8f0; }
    .user-dropdown button.logout:hover { background: #fed7d7; }

    .section-header { display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px; }
    .section-header h2 { font-size: 20px; color: var(--primary); }
    .section-header h2 i { margin-right: 10px; color: var(--secondary); }

    .search-box { position: relative; width: 250px; }
    .search-box i { position: absolute; left: 12px; top: 50%; transform: translateY(-50%); color: #a0aec0; }
    .search-box input { width: 100%; padding: 10px 15px 10px 35px; border: 1px solid #e2e8f0; border-radius: 6px; font-size: 14px; }

    .grid-container { display: grid; grid-template-columns: repeat(auto-fill, minmax(280px, 1fr)); gap: 20px; }
    .store-card { background: white; border-radius: 8px; padding: 20px; box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05); transition: all 0.3s ease; cursor: pointer; }
    .store-card:hover { transform: translateY(-3px); box-shadow: 0 10px 15px rgba(0, 0, 0, 0.1); }
    .store-card h3 { font-size: 18px; margin-bottom: 10px; color: var(--primary); }
    .store-card p { color: #718096; font-size: 14px; }

    .frame-card { background: white; border-radius: 8px; padding: 15px; box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05); position: relative; }
    .frame-card h4 { font-size: 16px; margin-bottom: 5px; color: var(--primary); }
    .frame-card p { font-size: 14px; color: #718096; margin-bottom: 5px; }
    .frame-card .frame-price { font-weight: 600; color: var(--dark); }
    .frame-card .frame-actions { position: absolute; top: 10px; right: 10px; display: flex; gap: 5px; }
    .frame-card .btn-remove { background: var(--danger); color: white; border: none; border-radius: 4px; width: 25px; height: 25px; cursor: pointer; display: flex; align-items: center; justify-content: center; font-size: 12px; }
    .frame-card .btn-remove:hover { background: #c53030; }

    .btn-back { background: var(--light); color: var(--primary); border: none; padding: 8px 15px; border-radius: 6px; cursor: pointer; display: flex; align-items: center; gap: 5px; font-weight: 600; }
    .btn-back:hover { background: #bee3f8; }
    .actions { display: flex; align-items: center; gap: 15px; }

    footer { text-align: center; padding: 20px 0; margin-top: 40px; border-top: 1px solid #e2e8f0; color: #718096; font-size: 14px; }

    #armacoes-container { display: none; }
    .active-section { display: block !important; animation: fadeIn 0.3s ease; }
    @keyframes fadeIn { from { opacity: 0; transform: translateY(10px); } to { opacity: 1; transform: translateY(0); } }

    /* Estilo para filtros */
    .filters { display: flex; flex-wrap: wrap; gap: 12px; margin: 15px 0; }
    .filters select { padding: 8px; border: 1px solid #ccc; border-radius: 6px; font-size: 14px; background: white; cursor: pointer; }
    .filters select:hover { border-color: #4299e1; }

    /* Loading */
    .loading { text-align: center; padding: 20px; color: var(--secondary); }
    .loading i { font-size: 24px; margin-bottom: 10px; }

    /* Tabs */
    .tabs { display: flex; border-bottom: 1px solid #e2e8f0; margin-bottom: 20px; }
    .tab { padding: 10px 20px; cursor: pointer; border-bottom: 2px solid transparent; }
    .tab.active { border-bottom-color: var(--secondary); color: var(--secondary); font-weight: 600; }
    .tab-content { display: none; }
    .tab-content.active { display: block; }

    /* Form styles */
    .form-group { margin-bottom: 15px; }
    .form-group label { display: block; margin-bottom: 5px; font-weight: 600; color: var(--dark); }
    .form-group input, .form-group select { width: 100%; padding: 8px 12px; border: 1px solid #e2e8f0; border-radius: 6px; font-size: 14px; }
    .btn { padding: 10px 20px; border: none; border-radius: 6px; cursor: pointer; font-weight: 600; }
    .btn-primary { background: var(--secondary); color: white; }
    .btn-primary:hover { background: var(--primary); }
    .btn-danger { background: var(--danger); color: white; }
    .btn-danger:hover { background: #c53030; }
  </style>
</head>
<body>
  <!-- LOGIN -->
  <div id="login-container">
    <form id="loginForm">
      <h2>üîí Acesso Restrito</h2>
      <input id="usuario" type="text" placeholder="Usu√°rio" required value="admin" />
      <input id="senha" type="password" placeholder="Senha" required value="1234"/>
      <button type="submit">Entrar</button>
      <p id="errorMsg" class="error-msg"></p>
    </form>
  </div>

  <!-- DASHBOARD -->
  <div id="dashboard" class="container">
    <header class="dashboard-header">
      <div class="logo">
        <h1>Controle de <span>Estoque</span></h1>
      </div>
      <div class="user-menu" id="user-menu">
        <span class="username">Admin</span>
        <i class="fas fa-user-circle"></i>
        <i class="fas fa-chevron-down" style="font-size: 12px;"></i>
        <div class="user-dropdown" id="user-dropdown">
          <button class="logout" onclick="fazerLogout()">
            <i class="fas fa-sign-out-alt"></i> Sair
          </button>
        </div>
      </div>
    </header>
    <main class="content">
      <div id="lojas-container" class="active-section">
        <div class="section-header">
          <h2><i class="fas fa-store"></i> Nossas Lojas</h2>
          <div class="search-box">
            <i class="fas fa-search"></i>
            <input id="search-store" type="text" placeholder="Buscar loja..."/>
          </div>
        </div>
        <div id="lojas-list" class="grid-container">
          <div class="loading">
            <i class="fas fa-spinner fa-spin"></i>
            <p>Carregando lojas...</p>
          </div>
        </div>
      </div>

      <div id="armacoes-container">
        <div class="section-header">
          <h2><i class="fas fa-glasses"></i> Arma√ß√µes: <span id="current-store-name"></span></h2>
          <div class="actions">
            <button id="back-to-stores" class="btn-back"><i class="fas fa-arrow-left"></i> Voltar</button>
            <div class="search-box">
              <i class="fas fa-search"></i>
              <input id="search-frame" type="text" placeholder="Buscar arma√ß√£o..."/>
            </div>
          </div>
        </div>

        <!-- TABS -->
        <div class="tabs">
          <div class="tab active" data-tab="lista">Lista de Arma√ß√µes</div>
          <div class="tab" data-tab="cadastro">Cadastrar Arma√ß√£o</div>
          <div class="tab" data-tab="entrada-saida">Entrada/Sa√≠da</div>
        </div>

        <!-- TAB 1: LISTA DE ARMA√á√ïES -->
        <div class="tab-content active" id="tab-lista">
          <!-- FILTROS -->
          <div class="filters">
            <select id="filter-brand">
              <option value="">Todas as Marcas</option>
            </select>
            <select id="filter-category">
              <option value="">Todas as Categorias</option>
            </select>
            <select id="filter-price">
              <option value="">Todos os Pre√ßos</option>
              <option value="0-199">At√© R$ 199</option>
              <option value="200-299">R$ 200 a R$ 299</option>
              <option value="300-399">R$ 300 a R$ 399</option>
              <option value="400-9999">Acima de R$ 400</option>
            </select>
            <select id="filter-quantity">
              <option value="">Todas as Quantidades</option>
              <option value="1-5">1 a 5</option>
              <option value="6-10">6 a 10</option>
              <option value="11-999">Mais de 10</option>
            </select>
          </div>
          <div id="armacoes-list" class="grid-container"></div>
        </div>

        <!-- TAB 2: CADASTRAR ARMA√á√ÉO -->
        <div class="tab-content" id="tab-cadastro">
          <div style="background:#fff; padding:20px; border-radius:8px; box-shadow:0 2px 6px rgba(0,0,0,0.1);">
            <h3 style="margin-bottom:15px; color:#2a4365;">‚ûï Cadastrar Nova Arma√ß√£o</h3>
            <form id="formCadastro">
              <div class="form-group">
                <label for="cadastro-loja">Loja *</label>
                <input id="cadastro-loja" type="text" placeholder="Nome da Loja" required />
              </div>
              <div class="form-group">
                <label for="cadastro-marca">Marca *</label>
                <input id="cadastro-marca" type="text" placeholder="Marca da Arma√ß√£o" required />
              </div>
              <div class="form-group">
                <label for="cadastro-modelo">Modelo *</label>
                <input id="cadastro-modelo" type="text" placeholder="Modelo da Arma√ß√£o" required />
              </div>
              <div class="form-group">
                <label for="cadastro-quantidade">Quantidade *</label>
                <input id="cadastro-quantidade" type="number" placeholder="Quantidade" required />
              </div>
              <div class="form-group">
                <label for="cadastro-preco">Pre√ßo</label>
                <input id="cadastro-preco" type="text" placeholder="Ex: 190.00" />
              </div>
              <div class="form-group">
                <label for="cadastro-categoria">Categoria</label>
                <input id="cadastro-categoria" type="text" placeholder="Ex: Acetato, Metal..." />
              </div>
              <button type="submit" class="btn btn-primary">Cadastrar</button>
              <p id="msgCadastro" style="margin-top:15px; font-weight:600;"></p>
            </form>
          </div>
        </div>

        <!-- TAB 3: ENTRADA/SA√çDA -->
        <div class="tab-content" id="tab-entrada-saida">
          <div style="background:#fff; padding:20px; border-radius:8px; box-shadow:0 2px 6px rgba(0,0,0,0.1);">
            <h3 style="margin-bottom:15px; color:#2a4365;">üîÑ Registrar Entrada/Sa√≠da</h3>
            <form id="formMovimentacao">
              <div class="form-group">
                <label for="movimentacao-loja">Loja *</label>
                <input id="movimentacao-loja" type="text" placeholder="Nome da Loja" required />
              </div>
              <div class="form-group">
                <label for="movimentacao-marca">Marca *</label>
                <input id="movimentacao-marca" type="text" placeholder="Marca da Arma√ß√£o" required />
              </div>
              <div class="form-group">
                <label for="movimentacao-modelo">Modelo *</label>
                <input id="movimentacao-modelo" type="text" placeholder="Modelo da Arma√ß√£o" required />
              </div>
              <div class="form-group">
                <label for="movimentacao-tipo">Tipo de Movimenta√ß√£o *</label>
                <select id="movimentacao-tipo">
                  <option value="entrada">Entrada</option>
                  <option value="saida">Sa√≠da</option>
                </select>
              </div>
              <div class="form-group">
                <label for="movimentacao-quantidade">Quantidade *</label>
                <input id="movimentacao-quantidade" type="number" placeholder="Quantidade" required />
              </div>
              <button type="submit" class="btn btn-primary">Registrar</button>
              <p id="msgMovimentacao" style="margin-top:15px; font-weight:600;"></p>
            </form>
          </div>
        </div>
      </div>
    </main>
    <footer>
      Sistema de Controle de Estoque v1.0
    </footer>
  </div>
<script>
  let dadosLojas = {}; // Estrutura principal que cont√©m as lojas e arma√ß√µes
  let lojaAtual = null;

  // --- Fun√ß√£o para salvar localmente (exemplo usando localStorage) ---
  function salvarLocal() {
    localStorage.setItem('dadosLojas', JSON.stringify(dadosLojas));
  }

  // --- Fun√ß√£o para carregar dados do localStorage ---
  function carregarLocal() {
    const dados = localStorage.getItem('dadosLojas');
    if (dados) {
      dadosLojas = JSON.parse(dados);
    }
  }

  // --- Fun√ß√£o para carregar dados da planilha Google Sheets (exemplo b√°sico) ---
  async function carregarDadosPlanilha() {
    // Voc√™ deve publicar sua planilha como CSV ou JSON ou usar API Google Sheets com token
    // Aqui um exemplo simplificado usando fetch de uma URL p√∫blica CSV convertido para JSON
    try {
      // Exemplo de URL de planilha publicada como CSV
      const urlCSV = 'URL_DA_PLANILHA_PUBLICADA_CSV';

      const response = await fetch(urlCSV);
      const csvText = await response.text();
      // Converter CSV para JSON (exemplo simples, sugiro usar bibliotecas para produ√ß√£o)
      const linhas = csvText.trim().split('\n');
      const cabecalho = linhas.shift().split(',');

      dadosLojas = {}; // Resetar dados

      linhas.forEach(linha => {
        const valores = linha.split(',');

        // Ajuste conforme o formato da sua planilha
        const loja = valores[0].toUpperCase().trim();
        const marca = valores[1].trim();
        const modelo = valores[2].trim();
        const quantidade = parseInt(valores[3]);
        const preco = valores[4].trim();
        const categoria = valores[5].trim();

        if (!dadosLojas[loja]) dadosLojas[loja] = [];

        dadosLojas[loja].push({
          marca,
          modelo,
          quantidade,
          preco: preco ? `R$ ${preco}` : 'R$ 0,00',
          categoria: categoria || 'Geral'
        });
      });

      salvarLocal();
      carregarLojas();
    } catch (error) {
      console.error("Erro ao carregar dados da planilha:", error);
    }
  }

  // --- Fun√ß√£o para abrir detalhes da loja ---
  function abrirDetalhesLoja(lojaId) {
    lojaAtual = lojaId.toUpperCase().trim();
    document.getElementById("lojas-container").classList.remove("active-section");
    document.getElementById("armacoes-container").classList.add("active-section");
    document.getElementById("current-store-name").textContent = lojaId;
    carregarArmacoes(lojaAtual);
    carregarFiltros(lojaAtual);
    mudarTab("lista");
  }

  // --- Carregar arma√ß√µes da loja ---
  function carregarArmacoes(lojaId) {
    const armacoesList = document.getElementById("armacoes-list");
    const armacoes = dadosLojas[lojaId] || [];

    if (armacoes.length === 0) {
      armacoesList.innerHTML = `<p style="grid-column:1/-1; text-align:center; padding:20px; color:#666;">
        Nenhuma arma√ß√£o cadastrada nesta loja</p>`;
      return;
    }

    armacoesList.innerHTML = armacoes.map(armacao => `
      <div class="frame-card">
        <div class="frame-actions">
          <button class="btn-remove" onclick="removerArmacao('${armacao.marca}', '${armacao.modelo}')" title="Remover arma√ß√£o">
            <i class="fas fa-times"></i>
          </button>
        </div>
        <h4>${armacao.modelo}</h4>
        <p><strong>Marca:</strong> ${armacao.marca}</p>
        <p><strong>Quantidade:</strong> ${armacao.quantidade} unidades</p>
        <p><strong>Pre√ßo:</strong> ${armacao.preco}</p>
        <p><strong>Categoria:</strong> ${armacao.categoria}</p>
      </div>
    `).join('');
  }

  // --- Remover arma√ß√£o ---
  function removerArmacao(marca, modelo) {
    if (!lojaAtual || !confirm(`Tem certeza que deseja remover ${marca} ${modelo}?`)) {
      return;
    }

    const loja = dadosLojas[lojaAtual];
    const index = loja.findIndex(a => a.marca === marca && a.modelo === modelo);

    if (index !== -1) {
      loja.splice(index, 1);
      salvarLocal();
      carregarArmacoes(lojaAtual);
      carregarLojas(); // Atualiza o card da loja
    }
  }

  // --- Cadastrar arma√ß√£o com valida√ß√£o ---
  async function cadastrarArmacao(event) {
    event.preventDefault();

    const lojaInput = document.getElementById("cadastro-loja").value;
    const loja = lojaInput.toUpperCase().trim();
    const marca = document.getElementById("cadastro-marca").value.trim();
    const modelo = document.getElementById("cadastro-modelo").value.trim();
    const quantidadeStr = document.getElementById("cadastro-quantidade").value.trim();
    const precoInput = document.getElementById("cadastro-preco").value.trim();
    const categoria = document.getElementById("cadastro-categoria").value.trim() || "Geral";
    const msgCadastro = document.getElementById("msgCadastro");

    // Valida√ß√µes b√°sicas
    if (!loja) {
      mostrarMensagem(msgCadastro, "Erro: O nome da loja √© obrigat√≥rio.", "red");
      return;
    }
    if (!marca) {
      mostrarMensagem(msgCadastro, "Erro: A marca √© obrigat√≥ria.", "red");
      return;
    }
    if (!modelo) {
      mostrarMensagem(msgCadastro, "Erro: O modelo √© obrigat√≥rio.", "red");
      return;
    }
    const quantidade = parseInt(quantidadeStr);
    if (isNaN(quantidade) || quantidade <= 0) {
      mostrarMensagem(msgCadastro, "Erro: A quantidade deve ser um n√∫mero positivo.", "red");
      return;
    }

    // Formata pre√ßo para padr√£o "R$ XX,XX"
    let preco = precoInput;
    if (!preco) {
      preco = "0,00";
    } else {
      preco = preco.replace(/[^\d,]/g, ""); // Permite apenas d√≠gitos e v√≠rgula
      if (!preco.includes(",")) preco += ",00";
    }

    // Garante que a loja existe na estrutura de dados
    if (!dadosLojas[loja]) {
      dadosLojas[loja] = [];
    }

    // Verifica se j√° existe esta arma√ß√£o na loja
    const armacaoExistente = dadosLojas[loja].find(a => a.marca === marca && a.modelo === modelo);

    if (armacaoExistente) {
      mostrarMensagem(msgCadastro, "Erro: Esta arma√ß√£o j√° existe na loja. Use a op√ß√£o 'Entrada/Sa√≠da' para adicionar mais unidades.", "red");
      return;
    }

    const novaArmacao = {
      marca: marca,
      modelo: modelo,
      quantidade: quantidade,
      preco: `R$ ${preco}`,
      categoria: categoria
    };

    // Adiciona localmente
    dadosLojas[loja].push(novaArmacao);
    salvarLocal();

    mostrarMensagem(msgCadastro, `Arma√ß√£o cadastrada com sucesso na loja ${loja}!`, "green");

    // Atualiza visualiza√ß√µes e filtros
    carregarLojas();
    if (lojaAtual === loja) {
      carregarArmacoes(lojaAtual);
      carregarFiltros(lojaAtual);
    }

    // Limpa o formul√°rio
    document.getElementById("formCadastro").reset();
  }

  // --- Fun√ß√£o para mostrar mensagens com timeout ---
  function mostrarMensagem(elemento, texto, cor, duracao = 4000) {
    elemento.textContent = texto;
    elemento.style.color = cor;
    setTimeout(() => {
      elemento.textContent = "";
    }, duracao);
  }

  // --- Registrar movimenta√ß√£o de estoque ---
  async function registrarMovimentacao(event) {
    event.preventDefault();

    const lojaInput = document.getElementById("movimentacao-loja").value;
    const loja = lojaInput.toUpperCase().trim();
    const marca = document.getElementById("movimentacao-marca").value.trim();
    const modelo = document.getElementById("movimentacao-modelo").value.trim();
    const tipo = document.getElementById("movimentacao-tipo").value;
    const quantidadeStr = document.getElementById("movimentacao-quantidade").value.trim();
    const msgMovimentacao = document.getElementById("msgMovimentacao");

    if (!loja) {
      mostrarMensagem(msgMovimentacao, "Erro: O nome da loja √© obrigat√≥rio.", "red");
      return;
    }

    if (!dadosLojas[loja]) {
      mostrarMensagem(msgMovimentacao, "Erro: Loja n√£o encontrada", "red");
      return;
    }

    const armacao = dadosLojas[loja].find(a => a.marca === marca && a.modelo === modelo);

    if (!armacao) {
      mostrarMensagem(msgMovimentacao, "Erro: Arma√ß√£o n√£o encontrada nesta loja", "red");
      return;
    }

    const quantidade = parseInt(quantidadeStr);
    if (isNaN(quantidade) || quantidade <= 0) {
      mostrarMensagem(msgMovimentacao, "Erro: Quantidade inv√°lida", "red");
      return;
    }

    if (tipo === "entrada") {
      armacao.quantidade += quantidade;
      mostrarMensagem(msgMovimentacao, `+${quantidade} unidades adicionadas ao estoque da loja ${loja}!`, "green");
    } else {
      if (armacao.quantidade < quantidade) {
        mostrarMensagem(msgMovimentacao, "Erro: Quantidade insuficiente em estoque", "red");
        return;
      }
      armacao.quantidade -= quantidade;
      mostrarMensagem(msgMovimentacao, `-${quantidade} unidades removidas do estoque da loja ${loja}!`, "orange");
    }

    salvarLocal();

    // Atualiza visualiza√ß√µes
    if (lojaAtual === loja) {
      carregarArmacoes(lojaAtual);
    }
    carregarLojas();

    // Limpa formul√°rio
    document.getElementById("formMovimentacao").reset();
  }

  // --- Carregar filtros para arma√ß√µes ---
  function carregarFiltros(lojaId) {
    const armacoes = dadosLojas[lojaId] || [];
    const marcas = [...new Set(armacoes.map(a => a.marca))];
    const categorias = [...new Set(armacoes.map(a => a.categoria))];

    const filterBrand = document.getElementById("filter-brand");
    const filterCategory = document.getElementById("filter-category");

    filterBrand.innerHTML = '<option value="">Todas as Marcas</option>';
    filterCategory.innerHTML = '<option value="">Todas as Categorias</option>';

    marcas.forEach(marca => {
      if (marca && marca !== "Sem marca") {
        filterBrand.innerHTML += `<option value="${marca}">${marca}</option>`;
      }
    });

    categorias.forEach(categoria => {
      if (categoria && categoria !== "Geral") {
        filterCategory.innerHTML += `<option value="${categoria}">${categoria}</option>`;
      }
    });
  }

  // --- Filtrar lojas pela busca ---
  function filtrarLojas() {
    const termo = document.getElementById("search-store").value.toLowerCase();
    const lojas = Object.keys(dadosLojas);
    const lojasFiltradas = lojas.filter(loja =>
      loja.toLowerCase().includes(termo)
    );

    const lojasList = document.getElementById("lojas-list");

    if (lojasFiltradas.length === 0) {
      lojasList.innerHTML = `<p style="grid-column:1/-1; text-align:center; padding:20px; color:#666;">
        Nenhuma loja encontrada</p>`;
      return;
    }

    lojasList.innerHTML = lojasFiltradas.map(loja => {
      const totalArmacoes = dadosLojas[loja].length;
      const totalQuantidade = dadosLojas[loja].reduce((sum, item) => sum + item.quantidade, 0);

      return `
        <div class="store-card" onclick="abrirDetalhesLoja('${loja}')">
          <h3>${loja}</h3>
          <p><strong>${totalArmacoes}</strong> modelos de arma√ß√µes</p>
          <p><strong>${totalQuantidade}</strong> unidades no total</p>
          <p><small>Clique para gerenciar</small></p>
        </div>
      `;
    }).join('');
  }

  // --- Mudar tab ativa ---
  function mudarTab(tabName) {
    document.querySelectorAll(".tab-content").forEach(tab => {
      tab.classList.remove("active");
    });
    document.querySelectorAll(".tab").forEach(tab => {
      tab.classList.remove("active");
    });

    document.getElementById(`tab-${tabName}`).classList.add("active");
    document.querySelector(`[data-tab="${tabName}"]`).classList.add("active");
  }

  // --- Aplicar filtros para arma√ß√µes ---
  function aplicarFiltros() {
    const brandFilter = document.getElementById("filter-brand").value;
    const categoryFilter = document.getElementById("filter-category").value;
    const priceFilter = document.getElementById("filter-price").value;
    const quantityFilter = document.getElementById("filter-quantity").value;

    let armacoes = dadosLojas[lojaAtual] || [];

    if (brandFilter) {
      armacoes = armacoes.filter(a => a.marca === brandFilter);
    }

    if (categoryFilter) {
      armacoes = armacoes.filter(a => a.categoria === categoryFilter);
    }

    if (priceFilter) {
      const [minPrice, maxPrice] = priceFilter.split("-").map(Number);
      armacoes = armacoes.filter(a => {
        // Corrige parsing do pre√ßo para float
        let precoNumerico = parseFloat(a.preco.replace(/[^\d,]/g, "").replace(",", ".")) || 0;
        return precoNumerico >= minPrice && precoNumerico <= maxPrice;
      });
    }

    if (quantityFilter) {
      const [minQ, maxQ] = quantityFilter.split("-").map(Number);
      armacoes = armacoes.filter(a => a.quantidade >= minQ && a.quantidade <= maxQ);
    }

    const armacoesList = document.getElementById("armacoes-list");
    if (armacoes.length === 0) {
      armacoesList.innerHTML = `<p style="grid-column:1/-1; text-align:center; padding:20px; color:#666;">
        Nenhuma arma√ß√£o encontrada</p>`;
      return;
    }

    armacoesList.innerHTML = armacoes.map(armacao => `
      <div class="frame-card">
        <div class="frame-actions">
          <button class="btn-remove" onclick="removerArmacao('${armacao.marca}', '${armacao.modelo}')" title="Remover arma√ß√£o">
            <i class="fas fa-times"></i>
          </button>
        </div>
        <h4>${armacao.modelo}</h4>
        <p><strong>Marca:</strong> ${armacao.marca}</p>
        <p><strong>Quantidade:</strong> ${armacao.quantidade} unidades</p>
        <p><strong>Pre√ßo:</strong> ${armacao.preco}</p>
        <p><strong>Categoria:</strong> ${armacao.categoria}</p>
      </div>
    `).join('');
  }

  // --- Atualiza lista de lojas ---
  function carregarLojas() {
    filtrarLojas();
  }

  // --- Event listeners e inicializa√ß√£o ---
  document.addEventListener("DOMContentLoaded", () => {
    carregarLocal();
    carregarLojas();

    // Se quiser carregar dados da planilha ao iniciar, descomente:
    // carregarDadosPlanilha();

    // Busca lojas em tempo real
    document.getElementById("search-store").addEventListener("input", filtrarLojas);

    // Bot√£o voltar para lista de lojas
    document.getElementById("back-to-stores").addEventListener("click", () => {
      document.getElementById("lojas-container").classList.add("active-section");
      document.getElementById("armacoes-container").classList.remove("active-section");
      lojaAtual = null;

      // Reset filtros e campos
      document.getElementById("filter-brand").value = "";
      document.getElementById("filter-category").value = "";
      document.getElementById("filter-price").value = "";
      document.getElementById("filter-quantity").value = "";
      document.getElementById("search-store").value = "";
      carregarLojas();

      mudarTab("lista");
    });

    // Formul√°rios
    document.getElementById("formCadastro").addEventListener("submit", cadastrarArmacao);
    document.getElementById("formMovimentacao").addEventListener("submit", registrarMovimentacao);

    // Filtros arma√ß√µes
    document.getElementById("filter-brand").addEventListener("change", aplicarFiltros);
    document.getElementById("filter-category").addEventListener("change", aplicarFiltros);
    document.getElementById("filter-price").addEventListener("change", aplicarFiltros);
    document.getElementById("filter-quantity").addEventListener("change", aplicarFiltros);
  });
</script>

</body>
</html>
